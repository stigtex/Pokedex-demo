!function(n){var t={};function e(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:o})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var i in n)e.d(o,i,function(t){return n[t]}.bind(null,i));return o},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=0)}([function(n,t,e){"use strict";e.r(t);function o(n){return n[0].toUpperCase()+n.slice(1).toLowerCase()}function i(n){let t=n.url.split("/")[6];return`\n    <div class="pokemonCard" id="${t}">\n        <img src="${`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-v/black-white/animated/${t}.gif`}">\n        <h3>${o(n.name)}</h3>\n    </div>\n    `}let r=document.getElementById("main"),u=0;function c(n){var t;(t=n,fetch("https://pokeapi.co/api/v2/pokemon/"+t).then((function(n){return n.json()}))).then((function(n){r.innerHTML=function(n){return`\n    <h1>${o(n.name)}</h1>\n    <button id="backButton">Back to pokedex</button>\n    <div>\n        <img src="${n.sprites.other.dream_world.front_default}">\n        <p>ID: ${n.id}</p>\n        <p>Type: ${n.types.map((function(n){return`<li>${o(n.type.name)}</li>`})).join("")}\n        <p>Height: ${n.height/10} m</p>\n        <p>Stats: </p>\n        <ul>${n.stats.map((function(n){return`<li>${o(n.stat.name)}: ${n.base_stat}</li>`})).join("")}\n        </ul>\n        <p>Abilities:</p>\n        <ul>${n.abilities.map((function(n){return`<li>${o(n.ability.name)}</li>`})).join("")}\n        </ul>\n    </div>\n    `}(n),document.getElementById("backButton").addEventListener("click",(function(){a(u,20)}))}))}function a(n,t){r.innerHTML="\n        <h3>Loading pokemons...</h3>\n    ",function(n,t){let e=n*t,o=Math.min(20,151-e);return fetch(`https://pokeapi.co/api/v2/pokemon?limit=${o}&offset=${e}`).then((function(n){return n.json()})).then((function(n){return n.results}))}(n,t).then((function(n){r.innerHTML=function(n){return`\n    <h1>My Pokemons</h1>\n    <button id="prevButton">Prev</button>\n    <button id="nextButton">Next</button>\n    <div id="pokemonList">\n        ${n.map(i).join("")}                    \n    </div>\n    `}(n);let e=document.getElementById("prevButton");u<1?e.style.display="none":e.addEventListener("click",(function(){u--,a(u,t)}));let o=document.getElementById("nextButton");(u+1)*t>=151?o.style.display="none":o.addEventListener("click",(function(){u++,a(u,t)})),document.getElementById("pokemonList").childNodes.forEach((function(n){n.addEventListener("click",(function(n){c(n.currentTarget.id)}))}))})).catch((function(n){r.innerHTML=function(n){return`\n        <h3>Unable to load pokedex</h3>\n        <p>${n.message}</p>\n        <p>Please check your internet connection.<p>\n    `}(n)}))}r.innerHTML='\n    <h1>My Pokedex</h1>\n    <button id="viewPokedex">View pokemons</button>\n    ',document.getElementById("viewPokedex").addEventListener("click",(function(){a(u,20)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,